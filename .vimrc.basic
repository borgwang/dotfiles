" ------------------------------
" General Settings
" ------------------------------
"
" --- Indent --- "
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2  " do not mix space with tab

" for particular filetypes
autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufFilePre,BufRead *.html set filetype=html
autocmd BufNewFile,BufFilePre,BufRead *.js set filetype=javascript
autocmd BufNewFile,BufFilePre,BufRead *.cc,*.h,*.cpp set filetype=cpp
autocmd BufNewFile,BufFilePre,BufRead *.json set filetype=json
autocmd BufNewFile,BufFilePre,BufRead *.python set filetype=python
autocmd FileType html,markdown,cpp,json,javascript setlocal ts=2 sw=2 sts=0

" --- Searching --- "
set showmatch
set incsearch
set hlsearch

set ignorecase  " ignore case when search by default
set smartcase  " use case if any caps used

" --- Appearance --- "
syntax enable
set background=dark
set laststatus=2
set statusline+=%F
set display=lastline  " for super long lines

" colorscheme gruvbox
colorscheme gruvbox

set colorcolumn=101
highlight ColorColumn ctermbg=lightgray

set list
set listchars=tab:>-,trail:-  " show tab as '--->', trailing space as '-'

set splitbelow splitright  " natural ways to split vim windows
autocmd VimResized * wincmd =  " resize panes when window is resized

" --- Editing --- "
set nocompatible
set encoding=utf-8  " utf-8 by default
set backspace=indent,eol,start  " backspace removes all
set scrolloff=10  " 10 lines before/after cursor during scroll
" save buffer whenever text is changed
" Also avoid nerdtree conflicts (see https://vi.stackexchange.com/questions/27098/autosave-and-nerdtree-conflicts)
autocmd TextChanged,TextChangedI *
  \ if &buftype ==# '' || &buftype == 'acwrite' |
  \     silent write |
  \ endif

" --- Performance --- "
set lazyredraw
set ttyfast  " faster redrawing
set re=0  " use new regular expression engine

" ------------------------------
" Key Mapping
" ------------------------------
" Remap the Leader key
let mapleader=" "

" Switch to last-active tab
if !exists('g:lasttab')
  let g:lasttab = 1
endif
nnoremap <Leader><Space> :exe "tabn ".g:lasttab<CR>
autocmd TabLeave * let g:lasttab = tabpagenr()

" Navigate between tabs
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt

" Windows Navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

tnoremap <C-J> <C-W><C-J>
tnoremap <C-K> <C-W><C-K>
tnoremap <C-L> <C-W><C-L>
tnoremap <C-H> <C-W><C-H>

" disable number increasing and decreasing
map <C-a> <Nop>
map <C-x> <Nop>
map <C-b> <C-O>

" map :tabp and :tabn
nnoremap <silent> th :tabp<CR>
nnoremap <silent> tl :tabn<CR>

" copy selection to system clickboard in visual mode (leader + c)
vnoremap <Leader>c "+y


" ------------------------------
" Custom Commands
" ------------------------------
" remove tailing whitespaces
command Tailor :%s/\s\+$//e
" toggle paste mode
command PasteToggle :set paste!
" toggle line number showing
command NumberToggle :set number!
" open terminal
command Terminal :terminal++rows=24

" rename the current file
function! Rename(name, bang)
  let l:curfile = expand("%:p")
  let l:curfilepath = expand("%:p:h")
  let l:newname = l:curfilepath . "/" . a:name
  let choice = confirm("Rename to " . l:newname . "?", "&Yes\n&No", 1)
  if choice == 1
    let v:errmsg = ""
    silent! exe "saveas" . a:bang . " " . l:newname
    if v:errmsg =~# '^$\|^E329'
      if expand("%:p") !=# l:curfile && filewritable(expand("%:p"))
        silent exe "bwipe! " . l:curfile
        if delete(l:curfile)
          echoerr "Could not delete " . l:curfile
        endif
      endif
    else
      echoerr v:errmsg
    endif
  endif
endfunction
command! -nargs=* -complete=file -bang Rename :call Rename("<args>", "<bang>")

" delete current file
function! Delete()
  let choice = confirm("Delete current file and close buffer?", "&Yes\n&No", 1)
  if choice == 1
    call delete(expand("%:p")) | q!
  endif
endfunction
command! Delete :call Delete()


" -----------
" Custom Snippets
" -----------
" one-line python debugging
iabbrev pdb import pdb; pdb.set_trace()

